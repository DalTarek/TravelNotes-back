{"version":3,"file":"travels.service.js","sourceRoot":"","sources":["../../src/services/travels.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA+D;AAC/D,yEAAkE;AAClE,+BAAgD;AAEhD,8CAAwD;AACxD,yCAAoC;AAGpC,IAAa,cAAc,GAA3B,MAAa,cAAc;IACvB;;OAEG;IACH,YAAoB,uBAA+C;QAA/C,4BAAuB,GAAvB,uBAAuB,CAAwB;IACnE,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,GAAG,CAAC,EAAU;QACV,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC3C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC,CACrE,CACJ,CAAC;IACV,CAAC;IAED,MAAM,CAAC,MAAc;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;aACzB,IAAI,CACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EACpD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACjD,EACD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,CAC/C,CAAC;IACV,CAAC;IAED,MAAM,CAAC,EAAU,EAAE,MAAc;QAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC;aAC5D,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACjD,EACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CACpE,CACJ,CAAC;IACV,CAAC;IAED,MAAM,CAAC,EAAU;QACb,OAAO,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACpD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CACpE,CACJ,CAAC;IACV,CAAC;IAEO,UAAU,CAAC,MAAc;QAC7B,OAAO,SAAE,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;CACJ,CAAA;AA/DY,cAAc;IAD1B,iBAAU,EAAE;qCAKoC,iDAAsB;GAJ1D,cAAc,CA+D1B;AA/DY,wCAAc","sourcesContent":["import {HTTPHandlerResponse, Injectable} from '@hapiness/core';\nimport {TravelsDocumentService} from './travels-document.service';\nimport {Observable, of, throwError} from 'rxjs';\nimport {Travel} from '../interfaces';\nimport {catchError, flatMap, map} from 'rxjs/operators';\nimport {Biim} from '@hapiness/biim';\n\n@Injectable()\nexport class TravelsService {\n    /**\n     * Class constructor\n     */\n    constructor(private _travelsDocumentService: TravelsDocumentService) {\n    }\n\n    listAll(): Observable<Travel[] | void> {\n        return this._travelsDocumentService.find();\n    }\n\n    one(id: string): Observable<Travel> {\n        return this._travelsDocumentService.findById(id)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`Travels with id '${id}' not found`))\n                )\n            );\n    }\n\n    create(travel: Travel): Observable<HTTPHandlerResponse> {\n        return this._addTravel(travel)\n            .pipe(\n                flatMap(_ => this._travelsDocumentService.create(_)),\n                catchError(e =>\n                    throwError(Biim.preconditionFailed(e.message))\n                ),\n                map(_ => ({ response: _, statusCode: 201 }))\n            );\n    }\n\n    update(id: string, travel: Travel): Observable<Travel> {\n        return this._travelsDocumentService.findByIdAndUpdate(id, travel)\n            .pipe(\n                catchError(e =>\n                    throwError(Biim.preconditionFailed(e.message))\n                ),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`Travel with id '${id}' not found`))\n                )\n            );\n    }\n\n    delete(id: string): Observable<void> {\n        return this._travelsDocumentService.findByIdAndRemove(id)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(undefined) :\n                        throwError(Biim.notFound(`Travel with id '${id}' not found`))\n                )\n            );\n    }\n\n    private _addTravel(travel: Travel): Observable<any> {\n        return of(travel);\n    }\n}\n"]}